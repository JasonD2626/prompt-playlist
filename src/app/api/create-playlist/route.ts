// src/app/api/create-playlist/route.ts

import { NextRequest, NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";
import OpenAI from "openai";

export async function POST(req: NextRequest) {
  try {
    // 1) Check authentication
    const token = await getToken({ req });
    if (!token?.accessToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // 2) Parse the incoming JSON body
    const { prompt } = await req.json();
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 });
    }

    // 3) Call OpenAI to generate song/artist suggestions
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
    const aiResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You are a music expert..." },
        {
          role: "user",
          content: `Generate a list of 10 songs or artists that fit the vibe: "${prompt}". Respond as a plain numbered list.`,
        },
      ],
    });

    // 4) Extract the list of suggestions
    const suggestionText = aiResponse.choices[0]?.message?.content || "";
    const queries = suggestionText
      .split("\n")
      .map((line) => line.replace(/^\d+\.\s*/, "").trim())
      .filter(Boolean);

    // 5) Build Spotify‐request headers
    const headers = {
      Authorization: `Bearer ${token.accessToken}`,
      "Content-Type": "application/json",
    };

    // 6) Search Spotify for each query to get a track URI
    const uris: string[] = [];
    for (const query of queries) {
      const searchRes = await fetch(
        `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=1`,
        { headers }
      );
      const searchData = await searchRes.json();
      const track = searchData.tracks?.items?.[0];
      if (track) {
        uris.push(track.uri);
      }
    }

    // 7) Get the current user’s ID so we can create a playlist
    const userRes = await fetch("https://api.spotify.com/v1/me", { headers });
    const userData = await userRes.json();
    const userId = userData.id;

    // 8) Create a new playlist on Spotify
    const playlistRes = await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        method: "POST",
        headers,
        body: JSON.stringify({
          name: `Prompt: ${prompt}`,
          description: "Generated by AI DJ",
          public: false,
        }),
      }
    );
    const playlist = await playlistRes.json();

    // 9) Add the tracks to that newly created playlist
    await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
      method: "POST",
      headers,
      body: JSON.stringify({ uris }),
    });

    // 10) Grab the playlist’s published web URL
    // Here is where you must declare “playlistUrl” so it actually exists:
    const playlistUrl = playlist.external_urls.spotify;

    // 11) Return it as JSON so the client can embed or link to it
    return NextResponse.json({ url: playlistUrl });
  } catch (err: any) {
    console.error("create-playlist error:", err);
    return NextResponse.json(
      { error: "Internal Server Error", details: err.message || "" },
      { status: 500 }
    );
  }
}
