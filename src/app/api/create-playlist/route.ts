import { getToken } from "next-auth/jwt";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const token = await getToken({ req });
    const accessToken = token?.accessToken;

    if (!accessToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { prompt } = await req.json();
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 });
    }

    const openai = new (await import("openai")).OpenAI({
      apiKey: process.env.OPENAI_API_KEY!,
    });

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You're a music expert..." },
        {
          role: "user",
          content: `Generate a list of 10 songs for the vibe: "${prompt}"`,
        },
      ],
    });

    const queries = (response.choices[0].message?.content || "")
      .split("\n")
      .map((line) => line.replace(/^\d+\.\s*/, "").trim())
      .filter(Boolean);

    const headers = {
      Authorization: `Bearer ${accessToken}`,
    };

    const uris: string[] = [];
    for (const q of queries) {
      const res = await fetch(
        `https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=track&limit=5`,
        { headers }
      );
      const data = await res.json();
      const track = data.tracks?.items?.find(
        (t: any) => !/karaoke|tribute|cover/i.test(t.name + t.artists[0]?.name)
      );
      if (track) uris.push(track.uri);
    }

    if (uris.length === 0) {
      return NextResponse.json(
        { error: "No valid songs found for this prompt." },
        { status: 404 }
      );
    }

    const me = await fetch("https://api.spotify.com/v1/me", { headers }).then(
      (r) => r.json()
    );

    const playlist = await fetch(
      `https://api.spotify.com/v1/users/${me.id}/playlists`,
      {
        method: "POST",
        headers: {
          ...headers,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: `Prompt: ${prompt}`,
          description: "Generated by DJ Z",
          public: false,
        }),
      }
    ).then((r) => r.json());

    await fetch(
      `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
      {
        method: "POST",
        headers: {
          ...headers,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ uris }),
      }
    );

    return NextResponse.json({ url: playlist.external_urls.spotify });
  } catch (err: any) {
    console.error("create-playlist error:", err);
    return NextResponse.json({ error: "Server error", message: err.message }, { status: 500 });
  }
}
