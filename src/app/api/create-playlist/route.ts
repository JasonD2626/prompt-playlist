import { NextRequest, NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";
import OpenAI from "openai";

export async function POST(req: NextRequest) {
  try {
    // 1) Check authentication
    const token = await getToken({ req });
    if (!token?.accessToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // 2) Parse the incoming JSON body
    const { prompt } = await req.json();
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 });
    }

    // 3) Generate track suggestions from OpenAI
    const openaiKey = process.env.OPENAI_API_KEY?.trim();
    if (!openaiKey) {
      return NextResponse.json({ error: "Missing OpenAI API Key" }, { status: 500 });
    }

    console.log("OPENAI KEY (partial):", openaiKey.slice(0, 10));
    const openai = new OpenAI({ apiKey: openaiKey });

    const aiResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You are a music expert..." },
        {
          role: "user",
          content: `Generate a list of 10 popular songs or artists that match this vibe: "${prompt}". Respond with a plain numbered list.`,
        },
      ],
    });

    const suggestionText = aiResponse.choices?.[0]?.message?.content || "";
    console.log("OpenAI suggestionText:", suggestionText);

    if (!suggestionText || suggestionText.length < 10) {
      return NextResponse.json(
        { error: "OpenAI returned an invalid or empty suggestion list." },
        { status: 500 }
      );
    }

    const queries = suggestionText
      .split("\n")
      .map((line) => line.replace(/^\d+\.\s*/, "").trim())
      .filter(Boolean);

    const headers = {
      Authorization: `Bearer ${token.accessToken}`,
      "Content-Type": "application/json",
    };

    // 4) Search Spotify for each suggestion
    const uris: string[] = [];
    for (const query of queries) {
      const searchRes = await fetch(
        `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=5`,
        { headers }
      );
      const searchData = await searchRes.json();
      const track = searchData.tracks?.items?.find(
        (t: any) =>
          !/karaoke|tribute|cover|made famous|originally performed/i.test(t.name) &&
          !/karaoke|tribute|cover|party tyme/i.test(t.artists[0]?.name)
      );
      if (track) {
        uris.push(track.uri);
      }
    }

    if (uris.length === 0) {
      return NextResponse.json(
        { error: "No valid songs found for this prompt." },
        { status: 500 }
      );
    }

    // 5) Get current user ID
    const userRes = await fetch("https://api.spotify.com/v1/me", { headers });
    const userData = await userRes.json();
    const userId = userData.id;

    // 6) Create new playlist
    const playlistRes = await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        method: "POST",
        headers,
        body: JSON.stringify({
          name: `Prompt: ${prompt}`,
          description: "Generated by AI DJ",
          public: false,
        }),
      }
    );
    const playlist = await playlistRes.json();

    // 7) Add tracks to playlist
    await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
      method: "POST",
      headers,
      body: JSON.stringify({ uris }),
    });

    // 8) Wait until playlist is populated before returning URL
    let tries = 0;
    let isReady = false;
    while (tries < 5 && !isReady) {
      await new Promise((res) => setTimeout(res, 1500));
      const check = await fetch(
        `https://api.spotify.com/v1/playlists/${playlist.id}`,
        { headers }
      );
      const data = await check.json();
      if (data?.tracks?.items?.length > 0) {
        isReady = true;
      }
      tries++;
    }

    // 9) Return public Spotify URL
    const playlistUrl = playlist.external_urls.spotify;
    return NextResponse.json({ url: playlistUrl });

  } catch (err: any) {
    console.error("create-playlist error:", err);
    return NextResponse.json(
      {
        error: "Internal Server Error",
        details: err.message || "Unknown error",
      },
      { status: 500 }
    );
  }
}
