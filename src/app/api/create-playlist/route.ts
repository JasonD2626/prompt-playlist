// src/app/api/create-playlist/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { getToken } from "next-auth/jwt";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

export async function POST(req: NextRequest) {
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  if (!token?.accessToken) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { prompt } = await req.json();
  const DESIRED = 10;

  // 1) Generate suggestions with OpenAI...
  const ai = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    temperature: 0.8,
    messages: [
      {
        role: "system",
        content: `
          Youâ€™re a music expert. Suggest ${DESIRED} original studio tracks,
          no instrumentals, karaoke, covers or live versions. Plain numbered list.
        `,
      },
      {
        role: "user",
        content: `Generate ${DESIRED} songs for: "${prompt}".`,
      },
    ],
  });

  const raw = ai.choices[0].message?.content || "";
  const queries = raw
    .split("\n")
    .map((l) => l.replace(/^\d+\.\s*/, "").trim())
    .filter(Boolean);

  // 2) Fetch Spotify track URIs
  const headers = {
    Authorization: `Bearer ${token.accessToken}`,
    "Content-Type": "application/json",
  };
  const uris: string[] = [];

  for (const q of queries) {
    const res = await fetch(
      `https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=track&limit=3`,
      { headers }
    );
    const data = await res.json();
    const good = (data.tracks.items || []).find(
      (t: any) =>
        !/(instrumental|karaoke|live|remix|cover|edit)/i.test(t.name)
    );
    if (good) uris.push(good.uri);
  }

  // 3) Create playlist and add tracks
  const userRes = await fetch("https://api.spotify.com/v1/me", { headers });
  const { id: userId } = await userRes.json();

  const createRes = await fetch(
    `https://api.spotify.com/v1/users/${userId}/playlists`,
    {
      method: "POST",
      headers,
      body: JSON.stringify({
        name: `Prompt: ${prompt}`,
        description: "Generated by AI",
        public: false,
      }),
    }
  );
  const playlist = await createRes.json();

  await fetch(
    `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
    {
      method: "POST",
      headers,
      body: JSON.stringify({ uris }),
    }
  );

  // **Return only the raw playlist ID** ðŸ‘‡
  return NextResponse.json({ id: playlist.id });
}
