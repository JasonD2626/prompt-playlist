import { NextRequest, NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";
import OpenAI from "openai";

export async function POST(req: NextRequest) {
  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET! });
    if (!token || !token.accessToken) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { prompt } = await req.json();
    if (!prompt) {
      return NextResponse.json({ error: "Missing prompt" }, { status: 400 });
    }

    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
    const aiResp = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You are a music expert..." },
        {
          role: "user",
          content: `Generate a list of 10 songs or artists that fit the vibe: "${prompt}". Respond as a numbered list.`,
        },
      ],
    });

    const suggestionText = aiResp.choices[0]?.message?.content || "";
    const queries = suggestionText
      .split("\n")
      .map((l) => l.replace(/^\d+\.\s*/, "").trim())
      .filter(Boolean);

    const headers = {
      Authorization: `Bearer ${token.accessToken}`,
      "Content-Type": "application/json",
    };

    const uris: string[] = [];
    for (const q of queries) {
      const res = await fetch(
        `https://api.spotify.com/v1/search?q=${encodeURIComponent(q)}&type=track&limit=5`,
        { headers }
      );
      const data = await res.json();
      const track = data.tracks?.items?.find(
        (t: any) =>
          !/karaoke|tribute|cover|made famous|originally performed/i.test(t.name) &&
          !/karaoke|tribute|cover/i.test(t.artists[0]?.name)
      );
      if (track) uris.push(track.uri);
    }

    if (uris.length === 0) {
      return NextResponse.json({ error: "No valid songs found." }, { status: 404 });
    }

    const meRes = await fetch("https://api.spotify.com/v1/me", { headers });
    const meData = await meRes.json();
    const userId = meData.id;

    const playlistRes = await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        method: "POST",
        headers,
        body: JSON.stringify({
          name: `Prompt: ${prompt}`,
          description: "Generated by AI DJ",
          public: false,
        }),
      }
    );
    const playlist = await playlistRes.json();

    await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
      method: "POST",
      headers,
      body: JSON.stringify({ uris }),
    });

    return NextResponse.json({ url: playlist.external_urls.spotify });
  } catch (err: any) {
    console.error("create-playlist error:", err);
    return NextResponse.json({ error: "Internal Server Error", details: err.message }, { status: 500 });
  }
}
